type: edu
custom_name: stage4
files:
- name: src/seamcarving/Main.kt
  visible: true
  text: |
    package seamcarving

    fun main() {
        print("Hello, World!")
    }
  learner_created: false
- name: test/SeamCarvingTest.java
  visible: false
  text: |
    import org.apache.commons.codec.binary.Hex;
    import org.hyperskill.hstest.testcase.TestCase;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import javax.imageio.ImageIO;
    import java.awt.*;
    import java.awt.image.BufferedImage;
    import java.io.ByteArrayOutputStream;
    import java.io.File;
    import java.io.IOException;
    import java.security.MessageDigest;
    import java.security.NoSuchAlgorithmException;
    import java.util.ArrayList;
    import java.util.Arrays;
    import java.util.List;


    class CheckFailException extends Exception {
        public CheckFailException(String s) {
            super(s);
        }
    }

    class Image {
        private BufferedImage image;

        Image(String filename) throws IOException {
            image = ImageIO.read(new File(filename));
        }

        private int dx2(int x, int y) {
            if (x == 0) {
                return dx2(x + 1, y);
            }
            else if (x == image.getWidth() - 1) {
                return dx2(x - 1, y);
            }
            else {
                Color l = new Color(image.getRGB(x - 1, y));
                Color r = new Color(image.getRGB(x + 1, y));
                return (l.getRed() - r.getRed()) * (l.getRed() - r.getRed()) +
                    (l.getGreen() - r.getGreen()) * (l.getGreen() - r.getGreen()) +
                    (l.getBlue() - r.getBlue()) * (l.getBlue() - r.getBlue());
            }
        }

        private int dy2(int x, int y) {
            if (y == 0) {
                return dy2(x, y + 1);
            }
            else if (y == image.getHeight() - 1) {
                return dy2(x, y - 1);
            }
            else {
                Color t = new Color(image.getRGB(x, y - 1));
                Color b = new Color(image.getRGB(x, y + 1));
                return (t.getRed() - b.getRed()) * (t.getRed() - b.getRed()) +
                    (t.getGreen() - b.getGreen()) * (t.getGreen() - b.getGreen()) +
                    (t.getBlue() - b.getBlue()) * (t.getBlue() - b.getBlue());
            }
        }

        public double pixelEnergy(int x, int y) {
            return Math.sqrt((double)dx2(x, y) + (double)dy2(x, y));
        }

        public List<Integer> findVerticalSeam() throws CheckFailException {
            ArrayList<Integer> result = new ArrayList<Integer>();
            for (int y = 0; y < image.getHeight(); y++) {
                boolean found = false;

                for (int x = 0; x < image.getWidth(); x++) {
                    Color c = new Color(image.getRGB(x, y));
                    if (c.equals(Color.RED)) {
                        result.add(x);
                        found = true;
                        break;
                    }
                }

                if (!found)
                    throw new CheckFailException(String.format("Could not find seam pixel in row (%d)", y));
            }
            return result;
        }
    }

    class OutFile {
        String hash;
        String inFileName;
        String outFilename;
        int width;
        int height;

        Double seamSum;

        OutFile(String inFileName, String outFilename, int width, int height, String hash, Double sum) {
            this.inFileName = inFileName;
            this.outFilename = outFilename;
            this.width = width;
            this.height = height;
            this.hash = hash;
            this.seamSum = sum;
        }

        public void checkSum() throws CheckFailException {
            try {
                double delta = 0.00001;

                Image input = new Image(inFileName);
                Image output = new Image(outFilename);

                double actualSum = 0;
                List<Integer> seam = output.findVerticalSeam();
                for (int y = 0; y < seam.size(); y++) {
                    int x = seam.get(y);
                    actualSum += input.pixelEnergy(x, y);
                }

                if (actualSum < seamSum - delta || actualSum > seamSum + delta) {
                    throw new CheckFailException(
                        String.format(
                            "Total energy of your seam (%f) does not match expected value (%f +/- %f)",
                            actualSum, seamSum, delta));
                }

            } catch (IOException e) {
                throw new CheckFailException(
                    String.format(
                        "Could not read output file '%s'. Please check you produce output file",
                        outFilename));
            }
        }

        public boolean compareWithActualMD5() throws CheckFailException {
            try {
                File imgPath = new File(outFilename);
                BufferedImage sourceImage = ImageIO.read(imgPath);

                BufferedImage rgbImage =
                    new BufferedImage(sourceImage.getWidth(), sourceImage.getHeight(), BufferedImage.TYPE_INT_RGB);
                for (int i = 0; i < sourceImage.getWidth(); i++) {
                    for (int j = 0; j < sourceImage.getHeight(); j++) {
                        rgbImage.setRGB(i, j, sourceImage.getRGB(i, j));
                    }
                }

                ByteArrayOutputStream baos = new ByteArrayOutputStream();
                ImageIO.write(rgbImage, "bmp", baos);

                MessageDigest md = MessageDigest.getInstance("MD5");
                md.update(baos.toByteArray());
                byte[] digest = md.digest();
                String actualHash = Hex.encodeHexString(digest);
                if (!actualHash.equalsIgnoreCase(hash)) {
                    throw new CheckFailException(
                        String.format(
                            "Hash sum of your image (%s) does not match expected value",
                            actualHash));
                }
            } catch (IOException e) {
                throw new CheckFailException(
                    String.format(
                        "Could not read output file '%s'. Please check you produce output file",
                        outFilename));
            } catch (NoSuchAlgorithmException e) {
                e.printStackTrace();
                throw new CheckFailException("Internal test error. please report to Hyperskill team");
            }

            return true;
        }

        public boolean compareActualDimensions() throws CheckFailException {
            try {
                BufferedImage image = ImageIO.read(new File(outFilename));

                if (image == null) {
                    throw new CheckFailException(
                        String.format(
                            "File format error. Looks like your output '%s' is not a valid image file.",
                            outFilename));
                }

                if (image.getWidth() != width) {
                    throw new CheckFailException(
                        String.format(
                            "Dimensions mismatch. Output image width: %d; expected width: %d",
                            image.getWidth(), width));
                }

                if (image.getHeight() != height) {
                    throw new CheckFailException(
                        String.format(
                            "Dimensions mismatch. Output image height: %d; expected height: %d",
                            image.getHeight(), height));
                }

            } catch (IOException e) {
                throw new CheckFailException(
                    String.format(
                        "Could not read output file '%s'. Please check you produce output file",
                        outFilename));
            }

            return true;
        }
    }

    public class SeamCarvingTest extends StageTest<OutFile> {

        @Override
        public List<TestCase<OutFile>> generate() {

            return Arrays.asList(
                new TestCase<OutFile>()
                    .addArguments("-in", "test/small.png", "-out", "test/small-seam.png")
                    .setAttach(new OutFile("test/small.png", "test/small-seam.png",
                        15, 10,
                        "831b2b94d6ca3ae71a8aacec4e5b5e23", 466.371057)).setTimeLimit(-1),

                new TestCase<OutFile>()
                    .addArguments("-in", "test/blue.png", "-out", "test/blue-seam.png")
                    .setAttach(new OutFile("test/blue.png", "test/blue-seam.png",
                        500, 334,
                        "bfde19c2d97092e104b14fd07f2cf5f3", 1146.092943)),

                new TestCase<OutFile>()
                    .addArguments("-in", "test/trees.png", "-out", "test/trees-seam.png")
                    .setAttach(new OutFile("test/trees.png", "test/trees-seam.png",
                        600, 429,
                        "9298d037e2defc97a1b35e8abddafb02", 1788.013453))
            );
        }

        @Override
        public CheckResult check(String reply, OutFile expectedFile) {
            try {
                expectedFile.compareActualDimensions();
                //expectedFile.compareWithActualMD5();
                expectedFile.checkSum();
            } catch (CheckFailException e) {
                return CheckResult.wrong(e.getMessage());
            }

            return CheckResult.correct();
        }
    }
  learner_created: false
- name: test/blue.png
  visible: false
  learner_created: false
- name: test/small.png
  visible: false
  text: iVBORw0KGgoAAAANSUhEUgAAAA8AAAAKCAIAAADkeZOuAAAABGdBTUEAALGPC/xhBQAAAAFzUkdCAK7OHOkAAAAgY0hSTQAAeiYAAICEAAD6AAAAgOgAAHUwAADqYAAAOpgAABdwnLpRPAAAActJREFUGFcVyz1v00AYAGDf2efYcS6xY2onTZNYhYZSAaLqBKK/gBVloRJCTLAwVgIJ2qUDFYIBImWjEzMSEwNKJr5EADEQBIKilgo1UaCJff58fdD9eVBlR0ixUDIWbXw0cVmv9VxIE4XLuKmCTopfzzj98yK4+oQdcSm6/3bFIgv6zLm/RoYlk4+vO09ebJTAKifT3iUg2w1td14CVnBd08uih99vzqFlWa/HmupLfj/ubdy9WopME4rsWkR/1pW9kjE4wZNwijXQFjyrsoYSKJzgEXXf8e7W+rqR5gmXAKXyFak4mgpjvNjdFKGGHsdPy56jhVmQ8Rf6bTVuOoPS7KPKBDMPBeqKbLnFX4VBp3xRoCE6gPaBX01AwVK0rFwfpLvVP/axB5QjcGXRa2LIhUwOLre2AWHE+VoiZDY55pDcQbfRGI63JR2f1PJLoYQ5T8fTQ+HCsCbMgZAcagFQaz+X+0yjCEY5tz/89GOoZLhsxlmZi6ZtWUvVCj+tRjZKglsokttvVGc8Swx932Q7Aut+eJV1cS3Q/wfq2Mopi9IaAYq8vRuSmrnXwzNoIZsrjgvRb9/vvH+phaQS5FUgYiFjnq2bZJ6Exj/1hM6t/HGy9AAAAABJRU5ErkJggg==
  learner_created: false
- name: test/trees.png
  visible: false
  learner_created: false
- name: src/seamcarving/OutOfBufferException.kt
  visible: true
  text: |
    package seamcarving

    class OutOfBufferException(size: Int, x: Int, y: Int) :
            RuntimeException("$x, $y is out from buffer size: $size") {

    }
  learner_created: true
- name: src/seamcarving/Rectangle.kt
  visible: true
  text: |
    package seamcarving

    import java.awt.Color
    import java.awt.image.BufferedImage
    import java.io.File
    import javax.imageio.ImageIO

    fun toRGB(color: Int): Triple<Int, Int, Int> {
        val blue = color and 0xFF
        val green = (color shr 8) and 0xFF
        val red = (color shr 16) and 0xFF
        val alpha = (color shr 24) and 0xFF
        return Triple(red, green, blue)
    }

    private fun toInt(rgb: Triple<Int, Int, Int>): Int {
        return (0xFF shl 24) or (rgb.first shl 16) or (rgb.second shl 8) or rgb.third;
    }


    fun pixel(data: Int): String = Integer.toBinaryString(data)

    class RGBPrinter(val data: IntArray, val width: Int, val height: Int) {
        public fun negate(): IntArray {
            val negative = IntArray(data.size)
            for (idx in data.indices) {
                val rgb = toRGB(data[idx])
                negative[idx] = toInt(Triple(255 - rgb.first, 255 - rgb.second, 255 - rgb.third))
            }
            return negative;
        }

        override fun toString(): String {
            val buffer = StringBuffer()
            var first = true;
            for (w in 0 until this.width) {
                if (!first) {
                    buffer.append("\n")
                }
                first = false;
                for (h in 0 until this.height) {
                    val d = data[w * width + h]
                    buffer.append(toRGB(d))
                    if (this.height - h != 1) {
                        buffer.append(",")
                    }
                }

            }
            return buffer.toString()
        }
    }


    private fun notMain() {
        println("Enter rectangle width:")
        val width = readLine()!!.toInt()
        println("Enter rectangle height:")
        val height = readLine()!!.toInt()
        println("Enter output image name:")
        val imageName = readLine()!!

        val bufferedImage = BufferedImage(width, height, BufferedImage.TYPE_INT_RGB)
        val graphics = bufferedImage.graphics
        graphics.color = Color.RED // Color(252, 13, 27)
        graphics.drawLine(0, 0, width - 1, height - 1)
        graphics.drawLine(0, height - 1, width - 1, 0)

        ImageIO.write(bufferedImage, "png", File(imageName))
        println("image $imageName created")
    }
  learner_created: true
- name: test/small-seam.png
  visible: true
  learner_created: true
- name: src/seamcarving/DataAccessor.kt
  visible: true
  learner_created: true
- name: src/seamcarving/RGB.kt
  visible: true
  learner_created: true
- name: src/seamcarving/TreeBuilder.kt
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/100/stages/553/implement#comment
status: Failed
feedback:
  message: |-
    Wrong answer in test #1

    Total energy of your seam (469.438331) does not match expected value (466.371057 +/- 0.000010)

    Please find below the output of your program during this failed test.

    ---

    Arguments: -in test/small.png -out test/small-seam.png

    Buffer size is java.awt.image.DataBufferByte@36feb467.size
    Buffer size is java.awt.image.DataBufferByte@38a7e987.size
    [5, 1] = 348.7907682264541, [6, 1] = 138.03260484392808, [7, 1] = 72.98630008433089
    selected = 1, c: [7, 1]
    [6, 2] = 211.90799890518525
    [7, 2] = 60.63002556489647
    [8, 2] = 103.99519219656263
    [6, 2] = 211.90799890518525, [7, 2] = 60.63002556489647, [8, 2] = 103.99519219656263
    selected = 0, c: [7, 2]
    [6, 3] = 216.09951411328996, [7, 3] = 66.24952830020754, [8, 3] = 17.233687939614086
    selected = 1, c: [8, 3]
    [7, 4] = 110.85576214162258, [8, 4] = 34.9857113690718, [9, 4] = 93.57884376289333
    selected = 0, c: [8, 4]
    [7, 5] = 121.74974332621815, [8, 5] = 54.47935388750494, [9, 5] = 113.75851616472501
    selected = 0, c: [8, 5]
    [7, 6] = 121.57302332343306, [8, 6] = 94.19129471453293, [9, 6] = 84.55175929571188
    selected = 1, c: [9, 6]
    [8, 7] = 36.578682316343766, [9, 7] = 65.12296062065974, [10, 7] = 92.00543462209176
    selected = -1, c: [8, 7]
    [7, 8] = 97.02061636580135, [8, 8] = 49.52776998815917, [9, 8] = 60.63002556489647
    selected = 0, c: [8, 8]
    [7, 9] = 93.47192091746055, [8, 9] = 46.46504062195577, [9, 9] = 46.98936049788292
    selected = 0, c: [8, 9]
  time: Sun, 04 Jul 2021 14:32:48 UTC
record: -1
